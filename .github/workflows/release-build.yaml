# .github/workflows/release-build.yml
name: Build & Upload Release Assets

permissions:
  contents: write

on:
  release:
    types: [published]

jobs:
  build-and-upload:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: arm64
          - os: macos-latest
            arch: x86_64
          - os: windows-latest
            arch: ''
        python: [3.12]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pyinstaller pyautogui pillow

      - name: Build AutoTyper
        id: build
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows build: Pillow lets PyInstaller convert .icns to .ico automatically
            pyinstaller --windowed --onefile \
              --name "AutoTyper" \
              --icon icon.icns \
              writer.py

            echo "artifact_path=dist/AutoTyper.exe"        >> $GITHUB_OUTPUT
            echo "artifact_name=AutoTyper-Windows.exe"     >> $GITHUB_OUTPUT

          else
            # macOS build: support Intel via Rosetta
            if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
              prefix="arch -x86_64"
            else
              prefix=""
            fi

            $prefix pyinstaller --windowed \
              --name "AutoTyper" \
              --icon icon.icns \
              writer.py

            # Zip only the .app bundle
            cd dist
            zip -r AutoTyper-macOS-${{ matrix.arch }}.zip AutoTyper.app
            cd ..

            echo "artifact_path=dist/AutoTyper-macOS-${{ matrix.arch }}.zip"  >> $GITHUB_OUTPUT
            echo "artifact_name=AutoTyper-macOS-${{ matrix.arch }}.zip"       >> $GITHUB_OUTPUT
          fi

      - name: Upload to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url:         ${{ github.event.release.upload_url }}
          asset_path:         ${{ steps.build.outputs.artifact_path }}
          asset_name:         ${{ steps.build.outputs.artifact_name }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN:      ${{ secrets.GITHUB_TOKEN }}
